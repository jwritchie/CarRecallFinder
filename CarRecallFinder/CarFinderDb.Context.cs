//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarRecallFinder
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BodyStyle> BodyStyles { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<DriveType> DriveTypes { get; set; }
        public virtual DbSet<EngineFuel> EngineFuels { get; set; }
        public virtual DbSet<EnginePosition> EnginePositions { get; set; }
        public virtual DbSet<EngineType> EngineTypes { get; set; }
        public virtual DbSet<Make> Makes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TransmissionType> TransmissionTypes { get; set; }
    
        public virtual ObjectResult<AllByEngineSize_Result> AllByEngineSize(string numberCylinders)
        {
            var numberCylindersParameter = numberCylinders != null ?
                new ObjectParameter("NumberCylinders", numberCylinders) :
                new ObjectParameter("NumberCylinders", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllByEngineSize_Result>("AllByEngineSize", numberCylindersParameter);
        }
    
        public virtual ObjectResult<AllCarsByHorsepowerGreaterThan300_Result> AllCarsByHorsepowerGreaterThan300()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllCarsByHorsepowerGreaterThan300_Result>("AllCarsByHorsepowerGreaterThan300");
        }
    
        public virtual ObjectResult<AllCarsUnder2000Kg_Result> AllCarsUnder2000Kg()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllCarsUnder2000Kg_Result>("AllCarsUnder2000Kg");
        }
    
        public virtual ObjectResult<AllCarsUnder2000KgWithAtLeast300HP_Result> AllCarsUnder2000KgWithAtLeast300HP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllCarsUnder2000KgWithAtLeast300HP_Result>("AllCarsUnder2000KgWithAtLeast300HP");
        }
    
        public virtual ObjectResult<string> AllMakesForYear(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AllMakesForYear", yearParameter);
        }
    
        public virtual ObjectResult<AllMatchingYearMakeModelTrim_Result> AllMatchingYearMakeModelTrim(string year, string make, string model, string trim)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var trimParameter = trim != null ?
                new ObjectParameter("Trim", trim) :
                new ObjectParameter("Trim", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllMatchingYearMakeModelTrim_Result>("AllMatchingYearMakeModelTrim", yearParameter, makeParameter, modelParameter, trimParameter);
        }
    
        public virtual ObjectResult<string> AllModelsForYearAndMake(string year, string make)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AllModelsForYearAndMake", yearParameter, makeParameter);
        }
    
        public virtual ObjectResult<AllSUVs_Result> AllSUVs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllSUVs_Result>("AllSUVs");
        }
    
        public virtual ObjectResult<string> AllTrimsForYearMakeModel(string year, string make, string model)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("Make", make) :
                new ObjectParameter("Make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AllTrimsForYearMakeModel", yearParameter, makeParameter, modelParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> UniqueCarMakes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UniqueCarMakes");
        }
    
        public virtual ObjectResult<string> UniqueCarModels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UniqueCarModels");
        }
    
        public virtual ObjectResult<string> UniqueModelYears()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UniqueModelYears");
        }
    
        public virtual ObjectResult<string> UniqueTrims()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UniqueTrims");
        }
    }
}
